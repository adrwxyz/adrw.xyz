{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-tech-2023-02-04-synology-docker-woes-mdx-4c66b12734348546c522.js","mappings":"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","sources":["webpack://adrw.xyz/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://adrw.xyz/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://adrw.xyz/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://adrw.xyz/./content/posts/tech/2023-02-04-synology-docker-woes.mdx","webpack://adrw.xyz/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx","webpack://adrw.xyz/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://adrw.xyz/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Synology builds some of the most approachable servers for novices. With Apple-aspirational integrated hardware and software, Synology servers are easy to use for most basic IT needs (backup, file storage, media storage, surveillance).\"), \"\\n\", React.createElement(_components.p, null, \"Yet, you will find complaints abound online about how their approach to integrated software building their OS (Synology DSM – Disk Station Manager) on an old fork of Debian, often limits what developers or tinkerers alike can do. For example, installing any software that would be easy with vanilla Ubuntu or Debian often doesn't work with Synology.\"), \"\\n\", React.createElement(_components.p, null, \"Or, it will appear to work and then turn out to be a handicapped version, like Synology's Docker package.\"), \"\\n\", React.createElement(_components.p, null, \"With no forewarning on the site or in the OS app store, Package Manager, it turns out that in practice Synology's Docker version not only is often very out of date but has serious limitations that limit many use cases.\"), \"\\n\", React.createElement(_components.h2, null, \"Swarm\"), \"\\n\", React.createElement(_components.p, null, \"Docker Swarm is a more lightweight automated container management tool, similar to Kubernetes.\"), \"\\n\", React.createElement(_components.p, null, \"Synology Docker flat out does not support it with obtuse failure modes like environment variables not being passed into containers created by Docker Swarm. Only after days of debugging did I find a \", React.createElement(_components.a, {\n    href: \"https://community.synology.com/enu/forum/1/post/131600?page=3&sort=oldest\"\n  }, \"forum post\"), \" which helpfully explained that Synology's Docker is a custom fork which doesn't include a working implementation of Swarm.\"), \"\\n\", React.createElement(_components.p, null, \"I tried one of the \", React.createElement(_components.a, {\n    href: \"https://kristoferlundgren.medium.com/synology-run-the-latest-docker-daemon-without-patching-dsm6-x-7bb4834d87bc\"\n  }, \"linked solutions\"), \" to run Docker-in-Docker, literally running a vanilla Docker instance within a container on the handicapped Synology Docker version. For a few weeks this worked fairly well, though Docker image builds were quite slow.\"), \"\\n\", React.createElement(_components.h2, null, \"Elasticsearch\"), \"\\n\", React.createElement(_components.p, null, \"While trying to start an Elasticsearch cluster, I soon encounterd persistent boot errors in Elastic from missing \", React.createElement(_components.a, {\n    href: \"https://docs.docker.com/engine/security/seccomp/\"\n  }, \"seccomp\"), \" support. After research, I learned it is a configurable syscall filter added into the Linux kernel which recent \", React.createElement(_components.a, {\n    href: \"https://www.elastic.co/blog/seccomp-in-the-elastic-stack\"\n  }, \"Elastic versions now require\"), \" to enforce security standards.\"), \"\\n\", React.createElement(_components.p, null, \"It turns out my 2017 Synology server was on an older Linux kernel version which didn't include this support.\"), \"\\n\", React.createElement(_components.p, null, \"Not to worry, I'm sure I could just update the OS?\"), \"\\n\", React.createElement(_components.p, null, \"Nope, Synology locks any device into the Linux kernel that is available when the device is being developed, with no way to upgrade it afterwards. So my server, which still is more than powerful enough for current needs, is stuck with an old Linux kernel and thus I can't run an Elastic cluster using Synology Docker.\"), \"\\n\", React.createElement(_components.h2, null, \"Build\"), \"\\n\", React.createElement(_components.p, null, \"I also encounterd a persistent failure to install \", React.createElement(_components.code, null, \"curl\"), \" as part of a Docker image build using Docker-in-Docker. To fix this, it looked like a simple tweak to the \", React.createElement(_components.code, null, \"dockerd.json\"), \" config to add DNS and iptables support to address the failures in resolving some Debian dependency servers.\"), \"\\n\", React.createElement(_components.p, null, \"I edited the JSON file, ran \", React.createElement(_components.code, null, \"killall dockerd\"), \" as before to restart the Docker daemon to pickup the changes, but this time Docker didn't start at all.\"), \"\\n\", React.createElement(_components.p, null, \"I reverted the changes, \", React.createElement(_components.code, null, \"killall dockerd\"), \", and again Docker didn't boot.\"), \"\\n\", React.createElement(_components.p, null, \"Full restart of the server, Docker didn't boot.\"), \"\\n\", React.createElement(_components.p, null, \"Synology's Package Manager now could see that something was up and offered to \\\"Repair\\\" the package. Multiple times and Docker still didn't boot.\"), \"\\n\", React.createElement(_components.p, null, \"I uninstalled and reinstalled the Docker package, Docker didn't boot.\"), \"\\n\", React.createElement(_components.p, null, \"I finally did the long avoided step of doing a hard uninstall which includes Synology removing all existing Docker images, containers, volumes, and the Docker shared folder on disk. I combed through \", React.createElement(_components.code, null, \"/var/packages/Docker\"), \", \", React.createElement(_components.code, null, \"/etc/\"), \", \", React.createElement(_components.code, null, \"/var/run/Docker*\"), \" and deleted any Docker remnant I could find.\"), \"\\n\", React.createElement(_components.p, null, \"On install, Docker finally started up.\"), \"\\n\", React.createElement(_components.h2, null, \"Docker in VM\"), \"\\n\", React.createElement(_components.p, null, \"I've begrudgingly come to terms with the validity of many complaints about Synology servers. Outside of basic IT needs, the software and hidden handicapped forks littered throughout are a frustrating minefield to run software on.\"), \"\\n\", React.createElement(_components.p, null, \"While it probably will use a bit more overhead in resources, I've resorted to running all but the most basic Docker containers in Ubuntu VMs using Synology Virtual Machine Manager. The repeated hurdle after hurdle to get a fairly basic Docker Swarm and Elastic cluster setup over the past 8 weeks has been exhausting. Doubly frustrating is that none of these limitations are openly stated anywhere by Synology that I could find making each investigation a slog through forums and Github gists to find an explanation or fix.\"), \"\\n\", React.createElement(_components.h2, null, \"tl;dr\"), \"\\n\", React.createElement(_components.p, null, \"Don't use your Synology as a devbox, stick to Ubuntu VMs. Only rely on Synology for basic IT needs (backup, file storage, media storage, surveillance).\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/adrw.xyz/adrw.xyz/content/posts/tech/2023-02-04-synology-docker-woes.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n    siteLanguage,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <html lang={siteLanguage} />\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Post","_createMdxContent","_components","Object","assign","p","h2","code","_provideComponents","components","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX","site","useSiteMetadata","siteTitle","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","siteLanguage","seo","url","lang","name","content","property","rel","type","sizes","withPrefix","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes"],"sourceRoot":""}